; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "ProsumentEneaItmTool"
#define MyAppVersion "1.0.5"
#define MyAppPublisher "ITM-Serwis"
#define MyAppURL "https://itm-serwis.pl"
#define MyAppExeName "ProsumentEneaItmTool.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{3B7DCB10-80DE-47D1-BC21-2AB8C8530E3E}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
PrivilegesRequiredOverridesAllowed=dialog
OutputBaseFilename=ProsumentEneaItmToolSetup
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "polish"; MessagesFile: "compiler:Languages\Polish.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "..\publish\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\publish\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]
var
  InstallTypePage: TWizardPage;
  InstallRadioButton: TRadioButton;
  PortableRadioButton: TRadioButton;

procedure InitializeWizard();
begin
  // Create a new page in the wizard
  InstallTypePage := CreateCustomPage(wpWelcome, 'Installation Type', 'Choose the type of installation');
  
  // Add radio buttons to the new page
  InstallRadioButton := TNewRadioButton.Create(WizardForm);
  InstallRadioButton.Parent := InstallTypePage.Surface;
  InstallRadioButton.Left := 0;
  InstallRadioButton.Top := 24;
  InstallRadioButton.Width := InstallTypePage.SurfaceWidth;
  InstallRadioButton.Caption := 'Standard Installation';
  InstallRadioButton.Checked := True;

  PortableRadioButton := TNewRadioButton.Create(WizardForm);
  PortableRadioButton.Parent := InstallTypePage.Surface;
  PortableRadioButton.Left := 0;
  PortableRadioButton.Top := 54;
  PortableRadioButton.Width := InstallTypePage.SurfaceWidth;
  PortableRadioButton.Caption := 'Portable Mode';
end;

function NextButtonClick(CurPageID: Integer): Boolean;
var
  ResultCode: Integer;
begin
  // If the user selected portable mode, run the app and exit the installer
  if (CurPageID = InstallTypePage.ID) and PortableRadioButton.Checked then
  begin
    ExtractTemporaryFile('{#MyAppExeName}');
    ExtractTemporaryFile('*.dll');
    ExtractTemporaryFile('*.json');
    ShellExec('', ExpandConstant('{tmp}\{#MyAppExeName}'), '', '', SW_SHOWNORMAL, ewNoWait, ResultCode);
    Result := False;  // Skip the rest of the installation
  end
  else
  begin
    Result := True;  // Continue with the installation
  end;
end;

function ShouldSkipPage(PageID: Integer): Boolean;
begin
  // Skip directory selection and components pages if portable mode is selected
  if (PageID = wpSelectDir) or (PageID = wpSelectComponents) then
  begin
    Result := PortableRadioButton.Checked;
  end
  else
  begin
    Result := False;
  end;
end;